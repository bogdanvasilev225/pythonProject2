from utils import randbool
from utils import randcell
from utils import randcell2
from constants import FOREST_CHANCE, MAX_FOREST_CHANCE, RIVER_LENGTH, UPGRADE_COST, LIFE_COST, CELL_TYPES, TREE_BONUS

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∫–ª–µ—Ç–æ–∫ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
#  0 - –ø–æ–ª–µ
#  1 - –¥–µ—Ä–µ–≤–æ
#  2 - —Ä–µ–∫–∞
#  3 - –≥–æ—Å–ø–∏—Ç–∞–ª—å
#  4 - –∞–ø–≥—Ä–µ–π–¥ —à–æ–ø
#  5 - –æ–≥–æ–Ω—å

class Map:
    def __init__(self, w, h):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        self.w = w
        self.h = h
        self.cells = [[0 for i in range(w)] for j in range(h)]
        self.generate_forest(FOREST_CHANCE, MAX_FOREST_CHANCE)
        self.generate_river(RIVER_LENGTH)
        self.generate_river(RIVER_LENGTH)
        self.generate_upgrade_shop()
        self.generate_hospital()

    def check_bounds(self, x, y):
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ç–æ—á–∫–∞ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–∞—Ä—Ç—ã
        return 0 <= x < self.h and 0 <= y < self.w

    def print_map(self, helico, clouds):
        # –í—ã–≤–æ–¥ –∫–∞—Ä—Ç—ã –Ω–∞ —ç–∫—Ä–∞–Ω —Å —É—á–µ—Ç–æ–º –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞ –∏ –æ–±–ª–∞–∫–æ–≤
        print("‚¨õ" * (self.w + 2))
        for ri, row in enumerate(self.cells):
            print("‚¨õ", end="")
            for ci, cell in enumerate(row):
                if (clouds.cells[ri][ci] == 1):
                    print("‚õÖÔ∏è", end="")
                elif (clouds.cells[ri][ci] == 2):
                    print("‚ö°", end="")
                elif (helico.x == ri and helico.y == ci):
                    print("üöÅ", end="")
                elif (cell >= 0 and cell < len(CELL_TYPES)):
                    print(CELL_TYPES[cell], end="")
            print("‚¨õ")
        print("‚¨õ" * (self.w + 2))

    def generate_river(self, l):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–µ
        # l - –¥–ª–∏–Ω–∞ —Ä–µ–∫–∏
        # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–∫–∏ –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –µ–µ –Ω–∞ l –∫–ª–µ—Ç–æ–∫
        # –ö–æ–¥ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã –∫–∞—Ä—Ç—ã –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –∫–∞—Ä—Ç—ã
        rc = randcell(self.w, self.h)
        rx, ry = rc[0], rc[1]

        if self.check_bounds(rx, ry):
            self.cells[rx][ry] = 2
        else:
            return

        while l > 0:
            rc2 = randcell2(rx, ry)
            rx2, ry2 = rc2[0], rc2[1]
            if self.check_bounds(rx2, ry2):
                self.cells[rx2][ry2] = 2
                rx, ry = rx2, ry2
                l -= 1
            else:
                break

    def generate_forest(self, r, mxr):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–µ—Å–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
        # r - —à–∞–Ω—Å –ø–æ—è–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –≤ –∫–ª–µ—Ç–∫–µ (–º–µ–Ω—å—à–µ –∑–Ω–∞—á–µ–Ω–∏–µ - –±–æ–ª—å—à–µ –¥–µ—Ä–µ–≤—å–µ–≤)
        # mxr - –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–Ω—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
        # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —á–∏—Å–ª–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ª–∏—á–∏—è –¥–µ—Ä–µ–≤–∞ –≤ –∫–∞–∂–¥–æ–π –∫–ª–µ—Ç–∫–µ
        for ri in range(self.h):
            for ci in range(self.w):
                if randbool(r, mxr):
                    self.cells[ri][ci] = 1

    def generate_tree(self):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ä–µ–≤–∞ –≤ —Å–ª—É—á–∞–π–Ω–æ–π –∫–ª–µ—Ç–∫–µ
        c = randcell(self.w, self.h)
        cx, cy = c[0], c[1]
        if self.check_bounds(cx, cy) and self.cells[cx][cy] == 0:
            self.cells[cx][cy] = 1

    def generate_upgrade_shop(self):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ —É–ª—É—á—à–µ–Ω–∏–π –≤ —Å–ª—É—á–∞–π–Ω–æ–π –∫–ª–µ—Ç–∫–µ
        c = randcell(self.w, self.h)
        cx, cy = c[0], c[1]
        if self.check_bounds(cx, cy):
            self.cells[cx][cy] = 4

    def generate_hospital(self):
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥–æ—Å–ø–∏—Ç–∞–ª—è –≤ —Å–ª—É—á–∞–π–Ω–æ–π –∫–ª–µ—Ç–∫–µ (–Ω–µ –Ω–∞ –º–∞–≥–∞–∑–∏–Ω–µ —É–ª—É—á—à–µ–Ω–∏–π)
        while True:
            c = randcell(self.w, self.h)
            cx, cy = c[0], c[1]
            if self.check_bounds(cx, cy) and self.cells[cx][cy] != 4:
                self.cells[cx][cy] = 3
                break

    def add_fire(self):
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–≥–Ω—è –≤ —Å–ª—É—á–∞–π–Ω–æ–π –∫–ª–µ—Ç–∫–µ —Å –¥–µ—Ä–µ–≤–æ–º
        c = randcell(self.w, self.h)
        cx, cy = c[0], c[1]
        if self.check_bounds(cx, cy) and self.cells[cx][cy] == 1:
            self.cells[cx][cy] = 5

    def update_fires(self):
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–ª–µ—Ç–æ–∫ —Å –æ–≥–Ω–µ–º –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –æ–≥–Ω–µ–π
        # –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–ª–µ—Ç–æ–∫ —Å –æ–≥–Ω–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –æ–≥–Ω–∏ –≤ —Å–ª—É—á–∞–π–Ω—ã–µ –∫–ª–µ—Ç–∫–∏
        for ri in range(self.h):
            for ci in range(self.w):
                cell = self.cells[ri][ci]
                if cell == 5:
                    self.cells[ri][ci] = 0
        for i in range(10):
            self.add_fire()

    def process_helicopter(self, helico, clouds):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫–ª–µ—Ç–∫–∏ –∏ –æ–±–ª–∞–∫–æ–≤
        # –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–µ—Ä—Ç–æ–ª–µ—Ç–∞, –ø—Ä–æ–≤–µ—Ä—è—è —Ç–∏–ø –∫–ª–µ—Ç–∫–∏ –∏ –Ω–∞–ª–∏—á–∏–µ –æ–±–ª–∞–∫–æ–≤ –≤ –µ–≥–æ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
        # –í–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏–∫—É –¥–ª—è —Ç–æ–ø–ª–∏–≤–∞, —Å—á–µ—Ç–∞, —É–ª—É—á—à–µ–Ω–∏–π, –∂–∏–∑–Ω–µ–π –∏ –≥–µ–π–º–æ–≤–µ—Ä–∞
        if helico.x < 0 or helico.y < 0 or helico.x >= self.h or helico.y >= self.w:
            return  # –í–µ—Ä—Ç–æ–ª–µ—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –∫–∞—Ä—Ç—ã, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º

        c = self.cells[helico.x][helico.y]
        d = clouds.cells[helico.x][helico.y]
        if (c == 2):
            helico.tank = helico.mxtank
        if (c == 5 and helico.tank > 0):
            helico.tank -= 1
            helico.score += TREE_BONUS
            self.cells[helico.x][helico.y] = 1
        if (c == 4 and helico.score >= UPGRADE_COST):
            helico.mxtank += 1
            helico.score -= UPGRADE_COST
        if (c == 3 and helico.score >= LIFE_COST):
            helico.lives += 10
            helico.score -= LIFE_COST
        if (d == 2):
            helico.lives -= 1
            if (helico.lives == 0):
                helico.game_over()

    def export_data(self):
        # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
        return {"cells": self.cells}

    def import_data(self, data):
        # –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç—ã –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        # –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è –∫–∞—Ä—Ç–∞
        self.cells = data["cells"] or [[0 for i in range(self.w)] for j in range(self.h)]